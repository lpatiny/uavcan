{
  "id": "uavcan.protocol.AccessCommandShell",
  "description": "THIS DEFINITION IS SUBJECT TO CHANGE.\nThis service allows to execute arbitrary commands on the remote node's internal system shell.\nEssentially, this service mimics a typical terminal emulator, with one text input (stdin) and two text\noutputs (stdout and stderr). When there's no process running, the input is directed into the terminal\nhandler itself, which interprets it. If there's a process running, the input will be directed into\nstdin of the running process. It is possible to forcefully return the terminal into a known state by\nmeans of setting the reset flag (see below), in which case the terminal will kill all of the child\nprocesses, if any, and return into the initial idle state.\nThe server is assumed to allocate one independent terminal instance per client, so that different clients\ncan execute commands without interfering with each other.\nInput and output should use this newline character.\nThe server is required to keep the result of the last executed command for at least this time.\nWhen this time expires, the server may remove the results in order to reclaim the memory, but it\nis not guaranteed. Hence, the clients must retrieve the results in this amount of time.\nThese flags control the shell and command execution.\nIf the shell is idle, it will interpret this string.\nIf there's a process running, this string will be piped into its stdin.\nIf RESET_SHELL is set, new input will be interpreted by the shell immediately.\nExit status of the last executed process, or error code of the shell itself.\nDefault value is zero.\nThese flags indicate the status of the shell.\nIn case of a shell error, this string may contain ASCII string explaining the nature of the error.\nOtherwise, if stdout read is requested, this string will contain stdout data. If stderr read is requested,\nthis string will contain stderr data. If both stdout and stderr read is requested, this string will start\nwith stdout and end with stderr, with no separator in between.",
  "type": "service",
  "request": {
    "variables": [
      {
        "type": "var",
        "kind": "int",
        "unsigned": true,
        "bits": 8,
        "name": "flags",
        "description": ""
      },
      {
        "length": 128,
        "range": true,
        "type": "array",
        "kind": {
          "type": "var",
          "kind": "int",
          "unsigned": true,
          "bits": 8
        },
        "name": "input",
        "description": ""
      }
    ],
    "statics": [
      "uint8 NEWLINE = '\\n'",
      "uint8 MIN_OUTPUT_LIFETIME_SEC = 10",
      "uint8 FLAG_RESET_SHELL          = 1     # Restarts the shell instance anew; may or may not imply CLEAR_OUTPUT_BUFFERS",
      "uint8 FLAG_CLEAR_OUTPUT_BUFFERS = 2     # Makes stdout and stderr buffers empty",
      "uint8 FLAG_READ_STDOUT          = 64    # Output will contain stdout",
      "uint8 FLAG_READ_STDERR          = 128   # Output will be extended with stderr"
    ]
  },
  "response": {
    "variables": [
      {
        "type": "var",
        "kind": "int",
        "unsigned": false,
        "bits": 32,
        "name": "lastExitStatus",
        "description": ""
      },
      {
        "type": "var",
        "kind": "int",
        "unsigned": true,
        "bits": 8,
        "name": "flags",
        "description": ""
      },
      {
        "length": 256,
        "range": true,
        "type": "array",
        "kind": {
          "type": "var",
          "kind": "int",
          "unsigned": true,
          "bits": 8
        },
        "name": "output",
        "description": ""
      }
    ],
    "statics": [
      "uint8 FLAG_RUNNING              = 1     # The shell is currently running a process; stdin/out/err are piped to it",
      "uint8 FLAG_SHELL_ERROR          = 2     # Exit status contains error code, output contains text (e.g. no such command)",
      "uint8 FLAG_HAS_PENDING_STDOUT   = 64    # There is more stdout to read",
      "uint8 FLAG_HAS_PENDING_STDERR   = 128   # There is more stderr to read"
    ]
  },
  "info": {
    "dataTypeID": 6,
    "hash": "59276b5921c9246e",
    "maxBitsLength": 1040
  }
}